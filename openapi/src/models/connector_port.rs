/*
 * Your Project API
 *
 * Your project description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};


#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConnectorPort {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "toStream", skip_serializing_if = "Option::is_none")]
    pub to_stream: Option<i32>,
    #[serde(rename = "fromStream", skip_serializing_if = "Option::is_none")]
    pub from_stream: Option<i32>,
    #[serde(rename = "isAttached", skip_serializing_if = "Option::is_none")]
    pub is_attached: Option<bool>,
    #[serde(rename = "portName", skip_serializing_if = "Option::is_none")]
    pub port_name: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::TypeC3bEnum>,
    #[serde(rename = "connectedUnitOperation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub connected_unit_operation: Option<Option<i32>>,
}

impl ConnectorPort {
    pub fn new(id: i32) -> ConnectorPort {
        ConnectorPort {
            id,
            to_stream: None,
            from_stream: None,
            is_attached: None,
            port_name: None,
            r#type: None,
            connected_unit_operation: None,
        }
    }
}

