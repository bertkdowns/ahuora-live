/*
 * Your Project API
 *
 * Your project description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};


#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PropertyInfo {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "access", skip_serializing_if = "Option::is_none")]
    pub access: Option<models::AccessEnum>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "unitType", skip_serializing_if = "Option::is_none")]
    pub unit_type: Option<models::UnitTypeEnum>,
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[serde(rename = "value", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub value: Option<Option<serde_json::Value>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::PropertyInfoTypeEnum>,
    #[serde(rename = "propKey", skip_serializing_if = "Option::is_none")]
    pub prop_key: Option<String>,
}

impl PropertyInfo {
    pub fn new(id: i32) -> PropertyInfo {
        PropertyInfo {
            id,
            description: None,
            access: None,
            name: None,
            unit_type: None,
            unit: None,
            value: None,
            r#type: None,
            prop_key: None,
        }
    }
}

