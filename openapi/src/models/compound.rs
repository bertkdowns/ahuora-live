/*
 * Your Project API
 *
 * Your project description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Compound {
    #[serde(rename = "ID")]
    pub id: i32,
    #[serde(rename = "Name")]
    pub name: String,
    #[serde(rename = "Acentric_Factor")]
    pub acentric_factor: f64,
    #[serde(rename = "CAS_Number")]
    pub cas_number: String,
    #[serde(rename = "Charge")]
    pub charge: i32,
    #[serde(rename = "Critical_Compressibility")]
    pub critical_compressibility: f64,
    #[serde(rename = "Critical_Pressure")]
    pub critical_pressure: f64,
    #[serde(rename = "Critical_Temperature")]
    pub critical_temperature: f64,
    #[serde(rename = "Critical_Volume")]
    pub critical_volume: f64,
    #[serde(rename = "Molar_Weight")]
    pub molar_weight: f64,
}

impl Compound {
    pub fn new(id: i32, name: String, acentric_factor: f64, cas_number: String, charge: i32, critical_compressibility: f64, critical_pressure: f64, critical_temperature: f64, critical_volume: f64, molar_weight: f64) -> Compound {
        Compound {
            id,
            name,
            acentric_factor,
            cas_number,
            charge,
            critical_compressibility,
            critical_pressure,
            critical_temperature,
            critical_volume,
            molar_weight,
        }
    }
}

