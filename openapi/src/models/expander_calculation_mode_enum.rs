/*
 * Your Project API
 *
 * Your project description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ExpanderCalculationModeEnum : * `OutletPressure` - Outletpressure * `Delta_P` - Delta P * `PowerGenerated` - Powergenerated * `Head` - Head * `Curves` - Curves
/// * `OutletPressure` - Outletpressure * `Delta_P` - Delta P * `PowerGenerated` - Powergenerated * `Head` - Head * `Curves` - Curves
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExpanderCalculationModeEnum {
    #[serde(rename = "OutletPressure")]
    OutletPressure,
    #[serde(rename = "Delta_P")]
    DeltaP,
    #[serde(rename = "PowerGenerated")]
    PowerGenerated,
    #[serde(rename = "Head")]
    Head,
    #[serde(rename = "Curves")]
    Curves,

}

impl std::fmt::Display for ExpanderCalculationModeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::OutletPressure => write!(f, "OutletPressure"),
            Self::DeltaP => write!(f, "Delta_P"),
            Self::PowerGenerated => write!(f, "PowerGenerated"),
            Self::Head => write!(f, "Head"),
            Self::Curves => write!(f, "Curves"),
        }
    }
}

impl Default for ExpanderCalculationModeEnum {
    fn default() -> ExpanderCalculationModeEnum {
        Self::OutletPressure
    }
}

