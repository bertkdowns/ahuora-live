/*
 * Your Project API
 *
 * Your project description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};


/// ValveCalculationModeEnum : * `Pressure Difference` - Deltap * `Outlet Pressure` - Outletpressure * `KvLiquid` - Kvliquid * `KvGas` - Kvgas * `KvSteam` - Kvsteam * `KvGeneral` - Kvgeneral
/// * `Pressure Difference` - Deltap * `Outlet Pressure` - Outletpressure * `KvLiquid` - Kvliquid * `KvGas` - Kvgas * `KvSteam` - Kvsteam * `KvGeneral` - Kvgeneral
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ValveCalculationModeEnum {
    #[serde(rename = "Pressure Difference")]
    PressureDifference,
    #[serde(rename = "Outlet Pressure")]
    OutletPressure,
    #[serde(rename = "KvLiquid")]
    KvLiquid,
    #[serde(rename = "KvGas")]
    KvGas,
    #[serde(rename = "KvSteam")]
    KvSteam,
    #[serde(rename = "KvGeneral")]
    KvGeneral,

}

impl std::fmt::Display for ValveCalculationModeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::PressureDifference => write!(f, "Pressure Difference"),
            Self::OutletPressure => write!(f, "Outlet Pressure"),
            Self::KvLiquid => write!(f, "KvLiquid"),
            Self::KvGas => write!(f, "KvGas"),
            Self::KvSteam => write!(f, "KvSteam"),
            Self::KvGeneral => write!(f, "KvGeneral"),
        }
    }
}

impl Default for ValveCalculationModeEnum {
    fn default() -> ValveCalculationModeEnum {
        Self::PressureDifference
    }
}

